:mod:`Application.Apps.DAC.Hardware_Control.ADC`
================================================

.. py:module:: Application.Apps.DAC.Hardware_Control.ADC


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   Application.Apps.DAC.Hardware_Control.ADC.ADS_8166




.. class:: ADS_8166(cs_pin, spi, muxer)


   Class for the used Octal ADC ADS 816x from Ti
   Datasheet: https://www.ti.com/lit/ds/symlink/ads8166.pdf?ts=1619135690040&ref_url=https%253A%252F%252Fwww.google.com%252F
   Initialises the ADC

   :param cs_pin: The Output Line of the Multiplexer which is connected to the ADC
   :type cs_pin: int
   :param spi: The SPI Interface to be used for communication
   :type spi: SpiDev spi
   :param muxer: The Multiplexer which controls the CS Routing
   :type muxer: Multiplexer Object

   .. method:: xfer(self, data)

      Wrapper for SPI xfer function
      additionally handles CS Line and SPI Mode Selection

      :param data: Data for SpiDev xfer function
      :type data: list of int

      :returns: returned Data of SpiDev xfer function
      :rtype: list of int


   .. method:: read(self, reg)

      Single Register Read function as specified for the ADC in the Datasheet

      :param reg: Register to be read
      :type reg: int

      :returns: Value of specified Register
      :rtype: int


   .. method:: write(self, reg, value)

      Single Register Write function as specified for the ADC in the Datasheet

      :param reg: Register the value should be written to
      :type reg: int
      :param value: Value to be written to the Register
      :type value: int


   .. method:: set_spi_mode(self, spi_mode=1)

      Change SPI Mode of the ADC.
      At startup spi mode of the ADC is always 01

      :param spi_mode: Desired SPI Mode. Defaults to 0b01.
      :type spi_mode: int, optional


   .. method:: write_access(self, enable=True)

      Enable Write Access to the ADC Registers.

      :param enable: Whether Write Access should be enabled or not. Defaults to True.
      :type enable: bool, optional


   .. method:: enabled_channel_id(self)

      Enable broadcast of Channel ID before Data Frame.


   .. method:: debug_mode(self, enable=True)

      Set the Debug Mode of the ADC on or off.
      In Debug mode the ADC returns fixed Data Values as described in the Datasheet.

      :param enable: Whether to turn debug mode on or off. Defaults to True.
      :type enable: bool, optional


   .. method:: select_channel(self, channel, debug=False)

      Selects the channel of which the ADC should broadcast Data.

      :param channel: Channel 1-8 of which the ADC should broadcast the Voltage
      :type channel: int
      :param debug: Enables/Disables Print statement for debugging Purposes. Defaults to False.
      :type debug: bool, optional


   .. method:: on_the_fly_mode(self, enable=True)

      Enables the on the fly Readout mode of the ADC

      :param enable: Enable/Disable. Defaults to True.
      :type enable: bool, optional


   .. method:: convert_single_value(self, value)

      Converts the LSB Value to a Voltage in Volts.
      Based on the specified Voltage Divider Resistors and the Voltage Reference (internal V_ref=4.096V)

      :param value: Voltage Register Value in LSB which should be converted
      :type value: int

      :returns: Converted Value in Volts
      :rtype: float


   .. method:: convert_values(self, values)

      For one value same Function as convert_single_value.
      For list of values in LSB converts all of them to Volts using convert_single_value.


      :param values: LSB Voltage Values
      :type values: int or list of int

      :returns: The converted value(s)
      :rtype: float or list of float


   .. method:: get_values_on_the_fly(self, channels)

      Get Values of the ADC when it is in on the fly Mode.

      :param channels: Channels to get the voltage data from
      :type channels: list of int

      :returns: Voltage Values of channels in LSB
      :rtype: list of int


   .. method:: get_voltage(self, channel, std=0.01, samples=100)

      Gets Voltage of specified channel in Default ADC Mode.
      Takes samples Measurements of channel till the STD of samples consecutive Values is smaller than std.

      :param channel: Channel index 0-7
      :type channel: int
      :param std: Upper Limit of Standard Deviation for 100 Measurments. Defaults to 0.01.
      :type std: float, optional
      :param samples: Samples to be taken. Defaults to 100
      :type samples: int,optional

      :returns: Mean Voltage of Channel over samples Measurements
      :rtype: float


   .. method:: get_all_voltages(self)

      Gets the Voltage from all eight channels

      :returns: Voltages from all eight channels
      :rtype: np.array



